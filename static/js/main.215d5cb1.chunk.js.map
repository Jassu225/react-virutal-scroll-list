{"version":3,"sources":["assets/images/loader.gif","config/index.js","api-service/status-codes.js","api-service/index.js","store/actions.js","store/actionTypes.js","components/DataTable/components/Header/Header.js","store/getters.js","components/DataTable/components/ScrollList/Row/Row.js","components/DataTable/components/Loader/Loader.js","components/DataTable/components/ScrollList/ScrollList.js","components/DataTable/DataTable.js","App.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["module","exports","API_URL","dispatch","a","result","setApiStatus","statusCodes","fetch","then","response","json","data","type","payload","fetchList","fetchListService","list","error","console","Header","props","useDispatch","columns","map","column","style","width","className","key","id","label","isSelectAllActive","useSelector","state","selectAll","areAllSelected","onSelectAllChange","useCallback","event","target","checked","onChange","Row","cells","textAlign","numeric","height","left","top","index","selectionList","selections","getSelections","isSelected","useMemo","log","includes","onClick","removeFromSelections","onSelectionChange","Loader","src","loader","alt","ScrollList","totalCount","length","scrollHeight","itemHeight","outerParent","useRef","scrollParent","useState","maxVisibleRowsCount","setMaxVisibleRowsCount","visibleRows","setVisibleRows","scrollTop","setScrollTop","isUpdateInProgress","setIsUpdateInProgress","visibleRowsIndexRange","setVisibleRowsIndexRange","scrollParentOffset","resizeListener","current","getBoundingClientRect","useEffect","window","addEventListener","removeEventListener","outerParentOffset","Math","max","ceil","min","rowElements","slice","row","onRowClick","setTimeout","getAdjustedRange","range","newRange","adjustRange","scrollDirection","index1","index2","visibleRowsCount","caluculateNewRange","element1","element2","nearEnd","farEnd","diff","round","getElementClientRect","currentScrollTop","bottom","scrollHandler","throttle","lastRowElemClientRect","firstRowElemClientRect","scrollParentStyle","apiStatus","getApiStatus","isFetching","ref","onScroll","DataTable","numericColumnsCount","reduce","count","nonNumericColumnsCount","newCol","rows","App","getList","rowData","rowIndex","nodeChanged","Boolean","location","hostname","match","initialState","createStore","action","newSelections","concat","findIndex","selectionId","splice","selection","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.215d5cb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.1d7626e6.gif\";","export const API_URL = 'https://jsonplaceholder.typicode.com/photos';","export default {\n    notUsed: -1,\n    requesting: 0,\n    successful: 1,\n    failed: 2,\n};","import { API_URL } from '../config';\nimport statusCodes from './status-codes';\nimport { setApiStatus } from '../store/actions';\n\nexport async function fetchListService(dispatch) {\n    let result = [];\n    try {\n        dispatch(setApiStatus(statusCodes.requesting));\n        result = await fetch(API_URL).then(response => response.json());\n        dispatch(setApiStatus(statusCodes.successful));\n    } catch(ex) {\n        dispatch(setApiStatus(statusCodes.failed));\n    };\n    return result;\n}","import { \n    SET_DATA, SET_API_STATUS, ADD_TO_SELECTION_LIST, REMOVE_FROM_SELECTION_LIST,\n    SELECT_ALL, DESELECT_ALL,\n} from './actionTypes';\nimport { fetchListService } from '../api-service';\n\nexport const setDataList = (data) => ({\n    type: SET_DATA,\n    payload: { data },\n});\n\nexport const setApiStatus = (data) => ({\n    type: SET_API_STATUS,\n    payload: { data },\n});\n\nexport const addToSelections = (id) => ({\n    type: ADD_TO_SELECTION_LIST,\n    payload: { id },\n});\n\nexport const removeFromSelections = (id) => ({\n    type: REMOVE_FROM_SELECTION_LIST,\n    payload: { id },\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ALL,\n    payload: {},\n});\n\nexport const deselectAll = () => ({\n    type: DESELECT_ALL,\n    payload: {},\n});\n\nexport const fetchList = () => {\n    return (dispatch) => {\n        return fetchListService(dispatch).then(\n            (list) => dispatch(setDataList(list)),\n            (error) => {\n                console.error(error);\n            },\n        );\n    };\n}","export const SET_DATA = 'setData';\nexport const SET_API_STATUS = 'setApiStatus';\nexport const ADD_TO_SELECTION_LIST = 'addToSelectionList';\nexport const REMOVE_FROM_SELECTION_LIST = 'removeFromSelectionList';\nexport const SELECT_ALL = 'selectAll';\nexport const DESELECT_ALL = 'deselectAll';","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Header.css';\nimport { selectAll, deselectAll } from '../../../../store/actions';\nimport { areAllSelected } from '../../../../store/getters';\n\nfunction Header(props) {\n    const dispatch = useDispatch();\n    const columns = props.columns.map((column) => {\n        const style = {\n            width: column.width,\n        };\n        return (\n            <div\n                className=\"data-table-header-cell\"\n                style={style}\n                key={column.id}\n            >\n                { column.label }\n            </div>\n        );\n    });\n\n    const isSelectAllActive = useSelector(state => areAllSelected(state));\n\n    const onSelectAllChange = useCallback((event) => {\n        if (event.target.checked) {\n            dispatch(selectAll());\n        } else {\n            dispatch(deselectAll());\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"data-table-header-container\">\n            <div className=\"data-table-header\">\n                <div className=\"data-table-header-checkbox\">\n                    <input type=\"checkbox\" checked={isSelectAllActive} onChange={onSelectAllChange}></input>\n                </div>\n                <div className=\"data-table-header-cells\">\n                    { columns }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","export const getList = (state) => state.list;\nexport const getApiStatus = (state) => state.apiStatus;\nexport const getSelections = (state) => state.selections;\nexport const areAllSelected = (state) => state.selectAll;\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Row.css';\nimport { addToSelections, removeFromSelections } from '../../../../../store/actions';\nimport { getSelections } from '../../../../../store/getters';\n\nfunction Row(props) {\n    const dispatch = useDispatch();\n    const cells = props.columns.map((column) => {\n        const style = {\n            width: column.width,\n            textAlign: column.numeric ? 'right' : 'left',\n        };\n        return (\n            <div\n                className=\"custom-scroll-list-row-cell\"\n                style={style}\n                key={column.id}\n            >\n                { props.data[column.id] || 'n/a' }\n            </div>\n        );\n    });\n    const style = {\n        height: props.height + 'px',\n        left: 0,\n        top: props.index * props.height + 'px',\n    };\n\n    const selectionList = useSelector(state => getSelections(state));\n    \n    const isSelected = useMemo(() => {\n        console.log(selectionList);\n        return selectionList.includes(props.data.id);\n    }, [props.data.id, selectionList]);\n    // onRowClick\n    const onClick = () => {\n\n    };\n\n    const onSelectionChange = (event) => {\n        // console.log(event.target.checked);\n        if (event.target.checked) {\n            dispatch(addToSelections(props.data.id));\n        } else {\n            dispatch(removeFromSelections(props.data.id));\n        }\n        props.onSelectionChange(event.target, props.data, props.index);\n    };\n    return (\n        <div\n            className=\"custom-scroll-list-row-container\"\n            style={style}\n            onClick={onClick}\n        >\n            <div className=\"custom-scroll-list-row\">\n                <div className=\"custom-scroll-list-row-checkbox\">\n                    <input type=\"checkbox\" checked={isSelected} onChange={onSelectionChange}></input>\n                </div>\n                <div className=\"custom-scroll-list-row-cells\">\n                    { cells }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Row;","import React from 'react';\nimport loader from '../../../../assets/images/loader.gif';\nimport './Loader.css';\n\nfunction Loader() {\n    return (\n        <div className=\"data-loader\">\n            <img src={loader} alt=\"loading...\" className=\"loader-image\" />\n        </div>\n    );\n};\n\nexport default Loader;","import React, { useMemo, useEffect, useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport './ScrollList.css';\nimport Row from './Row/Row';\nimport { throttle } from 'lodash';\nimport { getApiStatus } from '../../../../store/getters';\nimport statusCodes from '../../../../api-service/status-codes';\nimport Loader from '../Loader/Loader';\n\nfunction ScrollList(props) {\n    // 1. calculate total number of rows\n    const totalCount = useMemo(() => (props.list || []).length, [ props.list ]);\n    // 2. calulate total scroll height\n    const scrollHeight = useMemo(() => totalCount * props.itemHeight, [ totalCount, props.itemHeight ]);\n    const outerParent = useRef(null);\n    const scrollParent = useRef(null);\n    const [ maxVisibleRowsCount, setMaxVisibleRowsCount ] = useState(0);\n    const [ visibleRows, setVisibleRows ] = useState([]);\n    const [ scrollTop, setScrollTop ] = useState(0);\n    const [ isUpdateInProgress, setIsUpdateInProgress ] = useState(false);\n    const [ visibleRowsIndexRange, setVisibleRowsIndexRange ] = useState([0, 0]);\n    const scrollParentOffset = useRef(null);\n\n    const resizeListener = () => {\n        scrollParentOffset.current = outerParent.current.getBoundingClientRect();\n    }\n\n    useEffect(() => {\n        console.log('resize -- effect');\n        scrollParentOffset.current = outerParent.current.getBoundingClientRect();\n        window.addEventListener('resize', resizeListener);\n        return () => {\n            window.removeEventListener('resize', resizeListener);\n        };\n    }, []);\n\n    useEffect(() => {\n        console.log('setMaxVisibleRowsCount -- effect');\n        // 3. get height of main container element (outer parent)\n        const outerParentOffset = outerParent.current.getBoundingClientRect();\n        console.log(outerParentOffset);\n        // 4. calculate max visile rows (multiply by 3 (upper buffer + visible + lower buffer))\n        const maxVisibleRowsCount = Math.max(Math.ceil(outerParentOffset.height / props.itemHeight), 4) * 3\n        setMaxVisibleRowsCount(Math.min(maxVisibleRowsCount, props.list.length));\n    }, [props.itemHeight, props.list.length]);\n\n    useEffect(() => {\n        console.log('setVisibleRowsIndexRange -- effect');\n        setVisibleRowsIndexRange([0, maxVisibleRowsCount]);\n    }, [ maxVisibleRowsCount ]);\n\n    useEffect(() => {\n        console.log('setVisibleRows -- effect');\n        console.log('visibleRowsIndexRange--', visibleRowsIndexRange);\n        // console.log('data slice---', props.list.slice(...visibleRowsIndexRange));\n        const rowElements = props.list.slice(...visibleRowsIndexRange).map((row, index) => {\n            return (\n                <Row\n                    data={row}\n                    columns={props.columns}\n                    index={index + visibleRowsIndexRange[0]}\n                    height={props.itemHeight}\n                    key={row.id}\n                    onRowClick={props.onRowClick}\n                    onSelectionChange={props.onSelectionChange}\n                />\n            );\n        });\n        setVisibleRows(rowElements);\n    }, [props.columns, props.itemHeight, props.list, props.onRowClick, props.onSelectionChange, visibleRowsIndexRange]);\n\n    useEffect(() => {\n        setScrollTop(outerParent.current.scrollTop);\n        window.setTimeout(() => {\n            setIsUpdateInProgress(false);\n        }, 220);\n    }, [ visibleRows ]);\n\n    const getAdjustedRange = (range) => {\n        let newRange = range.slice(0);\n        if (newRange[0] < 0) {\n            newRange[0] = 0;\n            newRange[1] = maxVisibleRowsCount;\n        } else if (newRange[1] >= props.list.length) {\n            newRange[0] = props.list.length - maxVisibleRowsCount;\n            newRange[1] = props.list.length;\n        }\n        return newRange;\n    }\n\n    const adjustRange = (scrollDirection) => {\n        let index1 = visibleRowsIndexRange[0];\n        let index2 = visibleRowsIndexRange[1];\n        const visibleRowsCount = maxVisibleRowsCount / 3;\n        console.log('visibleRowsCount --', visibleRowsCount);\n        if (scrollDirection === 'down') {\n            index1 += visibleRowsCount;\n            index2 += visibleRowsCount;\n        } else {\n            index1 -= visibleRowsCount;\n            index2 -= visibleRowsCount;\n        }\n        \n        [index1, index2] = getAdjustedRange([index1, index2]);\n        // index1 = Math.max(index1, 0);\n        // index2 = Math.min(index2, props.list.length - 1);\n        console.log('scrollDirection--', scrollDirection);\n        console.log('setVisibleRowsIndexRange--', [index1, index2]);\n        setIsUpdateInProgress(true);\n        setVisibleRowsIndexRange([index1, index2]);\n    }\n\n    \n\n    const caluculateNewRange = (element1, element2, nearEnd, farEnd, scrollDirection) => {\n        // const element2 = scrollParentOffset.current;\n        const diff = element1[farEnd] - element2[farEnd];\n        let newRange = 0; \n        const visibleRowsCount = maxVisibleRowsCount / 3;\n        if (element1[farEnd] > element2[farEnd]){\n            // remove visibleRowsCount on one side and visibleRowsCount on the other\n            if (diff < props.itemHeight * 5) {\n                console.log('case1');\n                adjustRange(scrollDirection);\n            }\n        } else if (element1[nearEnd] < element2[nearEnd]) {\n            // messTxt = \"Last element went up the viewport and the list blank now. Calculate range by scroll height divided by row height. this is case 3\";\n            console.log('case3');\n            // console.log(rowElement);\n            // console.log(element2);\n            newRange = Math.round(outerParent.current.scrollTop / props.itemHeight);\n            // console.log('newRange---', newRange);\n            setIsUpdateInProgress(true);\n            setVisibleRowsIndexRange(getAdjustedRange([newRange - visibleRowsCount, newRange + visibleRowsCount]));\n            // messTxt += \" New Range is \" + (newRange - visibleRowsCount)  + \" - \" + (newRange + visibleRowsCount);\n        } else {\n            // messTxt = \"Last element is in the viewport and there will be some gap in the bottom.  Render next range here. This is case2\";\n            console.log('case2');\n            adjustRange(scrollDirection);\n        }\n    }\n\n    const getElementClientRect = (index) => {\n        const currentScrollTop = outerParent.current.scrollTop;\n        const top = visibleRowsIndexRange[index] * props.itemHeight - currentScrollTop;\n        const elemClientRect = {\n            top,\n            bottom: top + props.itemHeight,\n        };\n        return elemClientRect;\n    }\n\n    const scrollHandler = throttle((event) => {\n        // console.log('scrollhanlder');\n        if (isUpdateInProgress) return;\n        const currentScrollTop = outerParent.current.scrollTop;\n        // console.log('scrollTop--', scrollTop);\n        // console.log('currentScrollTop--', currentScrollTop);\n        if (scrollTop < currentScrollTop) {\n            // scrolling down - check last element\n            const lastRowElemClientRect = getElementClientRect(1);\n            // console.log('lastRowElemClientRect---', lastRowElemClientRect);\n            caluculateNewRange(lastRowElemClientRect, scrollParentOffset.current, 'top', 'bottom', 'down');\n        } else {\n            // scrolling up - check first element\n            const firstRowElemClientRect = getElementClientRect(0);\n            // console.log('firstRowElemClientRect---', firstRowElemClientRect);\n            caluculateNewRange(scrollParentOffset.current, firstRowElemClientRect, 'bottom', 'top', 'up');\n        }\n        setScrollTop(currentScrollTop);\n    }, 50);\n\n    const scrollParentStyle = {\n        height: scrollHeight + 'px',\n    };\n\n    const apiStatus = useSelector(state => getApiStatus(state));\n    const isFetching = useMemo(() => {\n        return apiStatus === statusCodes.requesting;\n    }, [apiStatus]);\n\n    return (\n        <div\n            ref={outerParent}\n            className=\"custom-scroll-list\"\n            onScroll={scrollHandler}\n        >\n            { isFetching ?\n                <Loader /> :\n                <div\n                    ref={scrollParent}\n                    className=\"custom-scroll-container\"\n                    style={scrollParentStyle}\n                >\n                    { visibleRows }\n                </div>\n            }\n        </div> \n    );\n}\n\nexport default ScrollList;\n","import React from 'react';\nimport './DataTable.css';\nimport Header from './components/Header/Header';\nimport ScrollList from './components/ScrollList/ScrollList';\n\nfunction DataTable(props) {\n    // console.log(props);\n    const numericColumnsCount = props.columns.reduce((count, column) => column.numeric ? count + 1 : count, 0);\n    const nonNumericColumnsCount = props.columns.length - numericColumnsCount;\n    const numericColWidth = 70; //px\n    const columns = props.columns.map((column) => {\n        let newCol = {...column};\n        if (!newCol.width) {\n            newCol.width = column.numeric ? `${numericColWidth}px` :\n                `calc( (100% - ${numericColWidth * numericColumnsCount}) / ${nonNumericColumnsCount})`;\n        }\n        return newCol;\n    });\n    return (\n        <div className=\"data-table\">\n            <Header columns={columns} />\n            <ScrollList\n                columns={columns}\n                list={props.rows}\n                itemHeight={50}\n                onRowClick={props.onRowClick}\n                onSelectionChange={props.onSelectionChange}\n            />\n        </div>\n    );\n}\n\nexport default DataTable;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport DataTable from './components/DataTable/DataTable';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getList } from './store/getters';\nimport { fetchList } from './store/actions';\n\nfunction App(props) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // console.log('dispatch -- effect');\n    dispatch(fetchList());\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const list = useSelector(state => getList(state));\n  const columns= [\n    {\n      'id': 'id',\n      'label': 'ID',\n      'numeric': true, // Right Align\n    }, {\n      'id': 'title', // Uniq ID to identify column\n      'label': 'Album Title',\n      'numeric': false,\n      'width': '50%', //('10px' | '10%' | '' | undefined),\n    },\n  ];\n\n  const onRowClick = (rowData, rowIndex) => {\n\n  };\n\n  const onSelectionChange = (nodeChanged, rowData, rowIndex) => {\n\n  };\n\n  return (\n    <div className=\"App\">\n      <DataTable\n        columns={columns}\n        rows={list}\n        onRowClick={onRowClick}\n        onSelectionChange={onSelectionChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  SET_DATA, SET_API_STATUS, ADD_TO_SELECTION_LIST, REMOVE_FROM_SELECTION_LIST,\n  SELECT_ALL, DESELECT_ALL,\n} from './actionTypes';\nimport statusCodes from '../api-service/status-codes';\n\nconst initialState = {\n  list: [],\n  apiStatus: statusCodes.notUsed,\n  selections: [],\n  selectAll: false,\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DATA: {\n      const { data } = action.payload;\n      return {\n        ...state,\n        list: data,\n      };\n    }\n    case SET_API_STATUS: {\n      const { data } = action.payload;\n      return {\n        ...state,\n        apiStatus: data,\n      };\n    }\n    case ADD_TO_SELECTION_LIST: {\n      const { id } = action.payload;\n      const newSelections = state.selections.concat([id]);\n      return {\n        ...state,\n        selections: newSelections,\n        selectAll: state.list.length === newSelections.length,\n      };\n    };\n    case REMOVE_FROM_SELECTION_LIST: {\n      const { id } = action.payload;\n      const selections = state.selections.slice(0);\n      const index = selections.findIndex(selectionId => selectionId === id);\n      if (index > -1) {\n        selections.splice(index, 1);\n      }\n      return {\n        ...state,\n        selections,\n        selectAll: false,\n      };\n    };\n    case SELECT_ALL:\n      // console.log('all selected');\n      return {\n        ...state,\n        selectAll: true,\n        selections: state.list.map(selection => selection.id),\n      };\n    case DESELECT_ALL:\n      return {\n        ...state,\n        selectAll: false,\n        selections: [],\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nexport default createStore(reducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}